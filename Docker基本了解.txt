原生应用程序： 外观和运行起来的性能是最佳的  （性能原生就是指性能最佳）

Docker镜像：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包删除容器：可以使用 docker container rm 来删除一个处于终止状态的容器。例如
$ docker container rm trusting_newton
trusting_newton
如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。

含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。

构建docker的连接：http://www.linuxidc.com/Linux/2015-07/120287.htm

查找某些特定的软件包：yum search vim

dangling images: 是指那些为 none的镜像，可以通过 docker image prune  来删除

docker删除本地镜像： docker image rm 【id】    docker image rm 7c1(ID前三位)

docker停止所有的镜像 docker stop $(docker ps -a -q)

docker删除所有的容器：docker rm $(docker ps -a -q)

运行Dockerfile创建的镜像：docker run --name web2 -d -p 81:80 nginx:v2

COPY和 ADD：此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用
COPY 指令，仅在需要自动解压缩的场合使用 ADD 

Docker查看所有镜像：docker image ls

容器和镜像的删除：https://www.cnblogs.com/q4486233/p/6482711.html


构建镜像和启动容器：
使用 docker build 来构建这个镜像：
$ docker build -t myweb:v1 .
构建好了后，我们启动一个容器：
$ docker run -d --name web -p 80:80 myweb:v1


Union File System(Union FS) ： 轻量级的高性能的分层文件系统，支持将文件系统中的修改进行提交和层层叠加，这个特性使得镜像可以通过分层实现和继承同时支持将不同目录挂载到同一个虚拟文件系统下。

镜像的构建：镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。

Docker容器：容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。

镜像和容器的关系：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。

Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。

数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。

Docker仓库：一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。